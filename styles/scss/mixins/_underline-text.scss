///  This mixin has 2 possible way of using it.
///  First is to include in the class you want to hover over while text
///  you want to underline needs to have attached class .underline-text
///  or you can send your custom class name via parameter $element.
///  Also you have to set $wrapper parameter to true.
///  Second is to just include it in whichever element you want. In this
///  case, parameter $wrapper should stay unchanged.
///  Other parameters are optional and they allow you customize your transition.
///
/// @access public
/// @author Karlo Volf
/// @param {percentage} $thickness [10%] - Thickness of the line in percentage.
/// @param {seconds} $duration [.5s] - How long animation lasts.
/// @param {timing-function} $timing-function [cubic-bezier(.79, .01, .22, .99)] - Execution speed function.
/// @param {hex} $color [currentColor] - Color of the line.
/// @param {boolean} $wrapper [false] - If wrapper is used as hover reference.
/// @param {string} $element [.underline-text] - Element on which you want underline.
/// @param {string} $state [hover] - The state in which it becomes underline element.
/// @example
/// .test {
///   @include underline-text();
/// }
/// .test2 {
///   @include underline-text(10, .7s, ease-in, #132031, true, a.link, hover);
/// }
/// @output
/// ```scss
/// .test {
///   display: inline;
///   transition: background-size 0.5s cubic-bezier(0.79, 0.01, 0.22, 0.99) 0s, background-position 0s step-end 0.5s;
///   text-decoration: none;
///   background-image: linear-gradient(transparent 90%, currentColor 90%, currentColor 100%);
///   background-repeat: no-repeat;
///   background-position-y: bottom;
///   background-size: 0% 100%;
///   &:hover {
///     background-position-x: right;
///     background-position-y: bottom;
///     background-size: 100% 100%;
///   }
/// }
/// .test2 {
///   & .link {
///     display: inline;
///     transition: background-size 0.7s ease-in 0s, background-position 0s step-end 0.7s;
///     text-decoration: none;
///     background-image: linear-gradient(transparent 95%, #132031 95%, #132031 100%);
///     background-repeat: no-repeat;
///     background-position-y: bottom;
///     background-size: 0% 100%;
///   }
///   &:hover .link {
///     background-position-x: right;
///     background-position-y: bottom;
///     background-size: 100% 100%;
///   }
/// }
/// ```
///


@mixin underline-text($thickness: 10%, $duration: 0.5s, $timing-function: cubic-bezier(0.79, 0.01, 0.22, 0.99), $color: currentColor, $wrapper: false, $element: '.underline-text', $state: 'hover') {
  $thickness: 100% - $thickness;

  $underline-inactive-state: (
    display: inline,

    transition: (background-size $duration $timing-function 0s, background-position 0s step-end $duration),
    text-decoration: none,

    background-image: linear-gradient(transparent $thickness, $color $thickness, $color 100%),
    background-repeat: no-repeat,
    background-position-y: bottom,
    background-size: 0% 100%,
  );

  $underline-active-state: (
    background-position-x: right,
    background-position-y: bottom,
    background-size: 100% 100%,
  );

  @if $wrapper {
    text-decoration: none;

    #{$element} {
      @include for-each-attribute($underline-inactive-state);
    }

    &:#{$state} {
      #{$element} {
        @include for-each-attribute($underline-active-state);
      }
    }
  }

  @else {
    @include for-each-attribute($underline-inactive-state);

    &:#{$state} {
      @include for-each-attribute($underline-active-state);
    }
  }
}
@mixin for-each-attribute($map) {
  @each $key, $value in $map {
    #{$key}: #{$value};
  }
}
